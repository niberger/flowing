root = true

# Don't use tabs for indentation.
[*]
indent_style = space
trim_trailing_whitespace = true

# Code files
[*.{cs,csx,cpp}]
indent_size = 4
insert_final_newline = true

# Xaml files
[*.xaml]
indent_size = 2

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct,xml,stylecop}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# Shell scripts
[*.sh]
end_of_line = lf

[*.{cmd,bat}]
end_of_line = crlf

[*.cs]
max_line_length = 120

###############################
# Naming Conventions          #
###############################

# Use PascalCase for constant fields
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_style.camel_case_style.capitalization = camel_case

# PascalCase with I prefix
dotnet_naming_style.interface_style.capitalization = pascal_case
dotnet_naming_style.interface_style.required_prefix = I

# PascalCase with T prefix
dotnet_naming_style.type_parameter_style.capitalization = pascal_case
dotnet_naming_style.type_parameter_style.required_prefix = T

# camelCase with _ prefix
dotnet_naming_style._camelCase.capitalization = camel_case
dotnet_naming_style._camelCase.required_prefix = _


## Rules
# Interfaces
dotnet_naming_rule.interface_naming.symbols = interface_symbol
dotnet_naming_rule.interface_naming.style = interface_style
dotnet_naming_rule.interface_naming.severity = suggestion
dotnet_naming_symbols.interface_symbol.applicable_kinds = interface
dotnet_naming_symbols.interface_symbol.applicable_accessibilities = *

# Classes, Structs, Enums, Properties, Methods, Events, Namespaces
dotnet_naming_rule.class_naming.symbols = class_symbol
dotnet_naming_rule.class_naming.style = pascal_case_style
dotnet_naming_rule.class_naming.severity = suggestion

dotnet_naming_symbols.class_symbol.applicable_kinds = class, struct, enum, property, method, event, namespace
dotnet_naming_symbols.class_symbol.applicable_accessibilities = *

# Type Parameters
dotnet_naming_rule.type_parameter_naming.symbols = type_parameter_symbol
dotnet_naming_rule.type_parameter_naming.style = type_parameter_style
dotnet_naming_rule.type_parameter_naming.severity = suggestion

dotnet_naming_symbols.type_parameter_symbol.applicable_kinds = type_parameter
dotnet_naming_symbols.type_parameter_symbol.applicable_accessibilities = *

# Const fields
dotnet_naming_rule.const_field_naming.symbols = const_field_symbol
dotnet_naming_rule.const_field_naming.style = pascal_case_style
dotnet_naming_rule.const_field_naming.severity = suggestion

dotnet_naming_symbols.const_field_symbol.applicable_kinds = field
dotnet_naming_symbols.const_field_symbol.applicable_accessibilities = *
dotnet_naming_symbols.const_field_symbol.required_modifiers = const

# Static readonly fields
dotnet_naming_rule.static_readonly_field_naming.symbols = static_readonly_field_symbol
dotnet_naming_rule.static_readonly_field_naming.style = pascal_case_style
dotnet_naming_rule.static_readonly_field_naming.severity = suggestion

dotnet_naming_symbols.static_readonly_field_symbol.applicable_kinds = field
dotnet_naming_symbols.static_readonly_field_symbol.applicable_accessibilities = *
dotnet_naming_symbols.static_readonly_field_symbol.required_modifiers = readonly,static

# Public fields
dotnet_naming_rule.public_field_naming.symbols = public_field_symbol
dotnet_naming_rule.public_field_naming.style = pascal_case_style
dotnet_naming_rule.public_field_naming.severity = suggestion

dotnet_naming_symbols.public_field_symbol.applicable_kinds = field
dotnet_naming_symbols.public_field_symbol.applicable_accessibilities = public, internal, protected

# Other fields
dotnet_naming_rule.other_field_naming.symbols = other_field_symbol
dotnet_naming_rule.other_field_naming.style = _camelCase
dotnet_naming_rule.other_field_naming.severity = suggestion

dotnet_naming_symbols.other_field_symbol.applicable_kinds = field
dotnet_naming_symbols.other_field_symbol.applicable_accessibilities = *

# Everything Else
dotnet_naming_rule.everything_else_naming.symbols = everything_else
dotnet_naming_rule.everything_else_naming.style = camel_case_style
dotnet_naming_rule.everything_else_naming.severity = suggestion

dotnet_naming_symbols.everything_else.applicable_kinds = *
dotnet_naming_symbols.everything_else.applicable_accessibilities = *

###############################
# Code formatting             #
###############################

# "This." and "Me." qualifiers
dotnet_style_qualification_for_field = false : warning
dotnet_style_qualification_for_property = false : warning
dotnet_style_qualification_for_method = false : warning
dotnet_style_qualification_for_event = false : warning

# Language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true : warning
dotnet_style_predefined_type_for_member_access = true : warning

# Modifier preferences
dotnet_style_require_accessibility_modifiers = always : warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async : warning
dotnet_style_readonly_field = true : warning

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity : warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity : warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity : warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary : warning

# Expression-level preferences
dotnet_style_object_initializer = true : warning
dotnet_style_collection_initializer = true : warning
dotnet_style_explicit_tuple_names = true : warning
dotnet_style_prefer_inferred_tuple_names = true : warning
dotnet_style_prefer_inferred_anonymous_type_member_names = true : warning
dotnet_style_prefer_auto_properties = true : warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true : warning
dotnet_style_prefer_conditional_expression_over_assignment = true
dotnet_style_prefer_conditional_expression_over_return = true

# Null-checking preferences
dotnet_style_coalesce_expression = true : warning
dotnet_style_null_propagation = true : warning

# Organize usings
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = true

# Implicit and explicit types
csharp_style_var_for_built_in_types = true : warning
csharp_style_var_when_type_is_apparent = true : warning
csharp_style_var_elsewhere = true : warning

# Expression-bodied members
csharp_style_expression_bodied_methods = when_on_single_line : warning
csharp_style_expression_bodied_constructors = when_on_single_line : warning
csharp_style_expression_bodied_operators = when_on_single_line : warning
csharp_style_expression_bodied_properties = when_on_single_line : warning
csharp_style_expression_bodied_indexers = when_on_single_line : warning
csharp_style_expression_bodied_accessors = when_on_single_line : warning

# Pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true : warning
csharp_style_pattern_matching_over_as_with_null_check = true : warning

# Inlined variable declarations
csharp_style_inlined_variable_declaration = true : warning

# Expression-level preferences
csharp_prefer_simple_default_expression = true : warning
csharp_style_deconstructed_variable_declaration = true : warning
csharp_style_pattern_local_over_anonymous_function = true : warning

# "Null" checking preferences
csharp_style_throw_expression = true : warning
csharp_style_conditional_delegate_call = true : warning

# Code block preferences
csharp_prefer_braces = true : warning

# Newline options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false

# Wrapping options
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true
